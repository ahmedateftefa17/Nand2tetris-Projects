// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 Risters, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in = load, sel = address[3..5], a = LoadDMuxOut0, b = LoadDMuxOut1, c = LoadDMuxOut2, d = LoadDMuxOut3, e = LoadDMuxOut4, f = LoadDMuxOut5, g = LoadDMuxOut6, h = LoadDMuxOut7);
    RAM8(in = in, load = LoadDMuxOut0, address = address[0..2], out = R0Out);
    RAM8(in = in, load = LoadDMuxOut1, address = address[0..2], out = R1Out);
    RAM8(in = in, load = LoadDMuxOut2, address = address[0..2], out = R2Out);
    RAM8(in = in, load = LoadDMuxOut3, address = address[0..2], out = R3Out);
    RAM8(in = in, load = LoadDMuxOut4, address = address[0..2], out = R4Out);
    RAM8(in = in, load = LoadDMuxOut5, address = address[0..2], out = R5Out);
    RAM8(in = in, load = LoadDMuxOut6, address = address[0..2], out = R6Out);
    RAM8(in = in, load = LoadDMuxOut7, address = address[0..2], out = R7Out);
    Mux8Way16(a = R0Out, b = R1Out, c = R2Out, d = R3Out, e = R4Out, f = R5Out, g = R6Out, h = R7Out, sel = address[3..5], out = out);
}